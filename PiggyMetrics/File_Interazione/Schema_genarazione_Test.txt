Passaggi per la creazione del Test:

	1- Entro nella cartella di PiggyMetrics_Originals;
	2- rimuovo eventuali immagini o container già presenti
		docker rm -f $(docker ps -a -q)
		docker rmi -f $(docker images -q)
		docker system prune
	3- setto variabili d'ambiente
		source ./set_env.sh 
	4- faccio partire applicazione originale
		docker-compose up 
	5- ricavo indirizzi IP di auth-service, notification-service, statistics-service, account-service
		docker ps
		docker inspect <ID_CONTAINER> | grep IP
	6- ricavo interfaccia dalla quale catturare pacchetti
		brctl show
	7- cattura dei pacchetti
		./capture_script.sh <test_dir> <name_pcap_file> <interface> [<list_of_container>]
	8- una volta terminata la cattura vado a chiudere applicazione orinale ed elimincare immagini, container, volumi...
		docker rm -f $(docker ps -a -q)
		docker rmi -f $(docker images -q)
		docker system prune
	9- split pacchetti appartenenti alla stessa sessione tcp
		./split.sh Test_Completo14/interaction.pcap Test_Completo14/SplitRest
	10- creazione degli script di test per la replica dei comandi REST
		./CreateTestPy.sh 1 21
	11- unione degi script per crearne uno unico
		./automatic_union.sh 1 21
	12- split dei pacchetti scambiati con database Mongo
		./split_mongo.sh Test_Completo2/interaction.pcap Test_Completo2/SplitMongo
	13- far ripartire applicazione originale
		docker-compose up
	14- modificare file name_ip_mongo.txt per mettere nuovi nomi delle applicazioni
	15- generazione file di report per MONGO
		./generate_test_replay.sh SplitMongo Test_Completo14
	16- terminare applicazione e rimozione container, immagini, volumi...
		docker rm -f $(docker ps -a -q)
		docker rmi -f $(docker images -q)
		docker system prune
	17- Modifica dei file contenuti in MockupFolder nella cartella del mockup di MONGO per far si che il mockup abbia il necessario
		per rispondere ai primi pacchetti per la configurazione
	18- Estrazione risposte mockup microservizio auth-service
		python3 extract_http_data.py Test_Completo1/interaction.pcap <IP_AUTH> <IP_ApplDaTestare> auth-mock-response-not.json
	19- Generazione file di risposte automatiche di auth-service
		./create_auth_resp.sh <nome_jsonfile_passo18_senza_estensione>
	20- Creazione della test suite andando a copiare gli opportuni file creati nei passi precedenti
		./automatic_copy.sh <Num_CartellaIniziale> <Num_CartellaFinale> <Nome_microservizio_testato>
		esempio: ./automatic_copy.sh 1 21 Account
	21- Modifica di docker-compose.yml in modo da avere in esecuzione solo i microservizi necessari al test del microservizio preso in
		considerazione (compresi mockup)
	22- Costruzione delle immagini per i mockup
		docker build -t mockupmongodb .
		docker build -t mockupapp .
	23- Esecuzione dell'applicazione modificata con mockup e microservizione da testare
		docker-compose -f docker-compose.yml -f docker-compose.dev.yml up > test.txt
	24- Nel frattempo si ricava indirizzo IP del mockup di auth-service e si configurano le risposte che deve dare
		docker ps
		docker inspect <ID_Containet> | grep IP
		chmod +x auth-mock-response-acc.sh
		./auth-mock-response-acc.sh <IP_Container>
	25- A questo punto è possibile eseguire il test utilizzando nome del container con mockup di mongo
		docker ps
		./Test.sh <CartellaTestSuite> <Nome_Container>
		esempio: ./Test.sh TestSuite_Account/ piggymetrics_account-mongodb_1_5159f0e5592e

